<?php
/**
 * Plugin Name:       Exam App Integration Engine
 * Description:       A multi-tenant engine to integrate the React examination app with any WordPress/WooCommerce site, handling SSO, dynamic data, and API services. Provides [mco_exam_login] and [mco_exam_showcase] shortcodes.
 * Version:           28.1.0 (Flexible CORS & API)
 * Author:            Annapoorna Infotech
 */

if (!defined('ABSPATH')) exit;

// --- NEW: Handle OPTIONS requests early for CORS Preflight ---
if (!function_exists('mco_handle_preflight_requests')) {
    function mco_handle_preflight_requests() {
        if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
            // Our existing CORS function already has the logic to check the origin and send headers.
            // It also gracefully exits for OPTIONS requests if the origin is allowed.
            mco_add_cors_support();
        }
    }
}
// Hook into 'init' with an early priority to catch the request before routing.
// This allows us to respond to preflight checks without needing a valid WP route.
add_action('init', 'mco_handle_preflight_requests', 5);


define('MCO_PLUGIN_VERSION', '28.1.0');
define('MCO_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('MCO_PLUGIN_URL', plugin_dir_url(__FILE__));

// --- FAILSAFE DEPENDENCY CHECK ---
if (!function_exists('mco_failsafe_dependency_check')) {
    function mco_failsafe_dependency_check() {
        if (!class_exists('WooCommerce')) {
            add_action('admin_notices', 'mco_dependency_error_notice');
            deactivate_plugins(plugin_basename(__FILE__));
            if (isset($_GET['activate'])) {
                unset($_GET['activate']);
            }
        }
    }
}
if (!function_exists('mco_dependency_error_notice')) {
    function mco_dependency_error_notice() {
        echo '<div class="notice notice-error is-dismissible">';
        echo '<p><strong>Exam App Integration Engine</strong> has been automatically deactivated because it requires the <strong>WooCommerce</strong> plugin to be installed and active. Please install or activate WooCommerce, then try activating this plugin again.</p>';
        echo '</div>';
    }
}
add_action('admin_init', 'mco_failsafe_dependency_check');

// --- ACTIVATION / DEACTIVATION HOOKS ---
register_activation_hook(__FILE__, 'mco_plugin_activate');
register_deactivation_hook(__FILE__, 'mco_plugin_deactivate');

if (!function_exists('mco_plugin_activate')) {
    function mco_plugin_activate() {
        require_once MCO_PLUGIN_DIR . 'includes/mco-cpts.php';
        mco_register_custom_post_types();
        flush_rewrite_rules();
        update_option('mco_plugin_version', MCO_PLUGIN_VERSION);
    }
}

if (!function_exists('mco_plugin_deactivate')) {
    function mco_plugin_deactivate() {
        flush_rewrite_rules();
        delete_option('mco_plugin_version');
    }
}

// --- INITIALIZATION & UPDATE CHECKER ---
if (!function_exists('mco_plugin_init')) {
    function mco_plugin_init() {
        // On init, check if the plugin version has changed. If so, flush rewrite rules.
        // This ensures API routes are always correctly registered after an update.
        if (get_option('mco_plugin_version') !== MCO_PLUGIN_VERSION) {
            flush_rewrite_rules();
            update_option('mco_plugin_version', MCO_PLUGIN_VERSION);
        }
        
        if (!class_exists('WooCommerce')) {
            return;
        }

        require_once MCO_PLUGIN_DIR . 'includes/mco-cpts.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-admin.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-data.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-api.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-shortcodes.php';

        // CRITICAL FIX: Register Custom Post Types directly within the 'init' action.
        // This ensures they are available before any other hooks (like admin_menu or rest_api_init) need them.
        mco_register_custom_post_types();

        mco_register_admin_hooks();
        mco_register_admin_tabs();
        mco_register_api_hooks();
        mco_register_shortcode_hooks();

        // Add CORS support for direct API calls from the React app
        add_action('rest_api_init', function() {
            remove_filter('rest_pre_serve_request', 'rest_send_cors_headers');
            add_filter('rest_pre_serve_request', function($value) {
                mco_add_cors_support();
                return $value;
            }, 15);
        });
    }
}
add_action('init', 'mco_plugin_init');


// --- CORS SUPPORT FOR DYNAMIC FRONTEND (FLEXIBLE & ROBUST) ---
if (!function_exists('mco_add_cors_support')) {
    function mco_add_cors_support() {
        $request_origin = get_http_origin();
        if (!$request_origin) {
            return; // Not a CORS request.
        }

        $app_url_setting = get_option('mco_exam_app_url');
        if (empty($app_url_setting)) {
            return; // No URL configured.
        }

        $parsed_setting = parse_url(rtrim($app_url_setting, '/'));
        if (!isset($parsed_setting['host'])) {
            return; // Invalid URL in settings.
        }

        $scheme = $parsed_setting['scheme'] ?? 'https';
        $host = $parsed_setting['host'];
        $port = isset($parsed_setting['port']) ? ':' . $parsed_setting['port'] : '';

        // Create an array of potential valid origins to be more flexible.
        $allowed_origins = [];
        $allowed_origins[] = "{$scheme}://{$host}{$port}";

        // Add www/non-www variations to the allowed list.
        if (strpos($host, 'www.') === 0) {
            $non_www_host = substr($host, 4);
            $allowed_origins[] = "{$scheme}://{$non_www_host}{$port}";
        } else {
            $www_host = 'www.' . $host;
            $allowed_origins[] = "{$scheme}://{$www_host}{$port}";
        }
        
        // The request origin must be in our allowed list.
        if (in_array($request_origin, $allowed_origins, true)) {
            header('Access-Control-Allow-Origin: ' . esc_url($request_origin));
            header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
            header('Access-Control-Allow-Credentials: true');
            header('Access-Control-Allow-Headers: Authorization, Content-Type');
            header('Vary: Origin'); // Good practice for caching proxies

            if ('OPTIONS' === $_SERVER['REQUEST_METHOD']) {
                status_header(200);
                exit();
            }
        }
        // If the origin doesn't match, no headers are sent, and the browser will block the request as intended.
    }
}
?>