<?php
if (!defined('ABSPATH')) exit;

// Hook registration
if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_notices', 'mco_admin_notices');
        add_action('admin_menu', 'mco_exam_add_admin_menu');
        add_action('admin_init', 'mco_exam_register_settings');
        add_action('add_meta_boxes', 'mco_add_meta_boxes');
        add_action('save_post_product', 'mco_save_wc_product_meta_data');
        add_action('save_post_mco_exam_program', 'mco_save_exam_program_meta');
        add_action('save_post_mco_recommended_book', 'mco_save_book_meta_data');
        
        // CSV Importer Hooks
        add_action('admin_enqueue_scripts', 'mco_enqueue_admin_scripts');
        add_action('admin_footer-edit.php', 'mco_add_import_modals_to_footer');
        
        // Exam Importer AJAX
        add_action('wp_ajax_mco_import_exams_csv_start', 'mco_handle_ajax_import_exams_start');
        add_action('wp_ajax_mco_import_exams_csv_batch', 'mco_handle_ajax_import_exams_batch');
        add_action('wp_ajax_mco_import_exams_csv_cancel', 'mco_handle_ajax_import_exams_cancel');

        // Book Importer AJAX
        add_action('wp_ajax_mco_import_books_csv_start', 'mco_handle_ajax_import_books_start');
        add_action('wp_ajax_mco_import_books_csv_batch', 'mco_handle_ajax_import_books_batch');
        add_action('wp_ajax_mco_import_books_csv_cancel', 'mco_handle_ajax_import_books_cancel');
    }
}

if (!function_exists('mco_admin_notices')) {
    function mco_admin_notices() {
        if (!defined('MCO_JWT_SECRET') || strlen(MCO_JWT_SECRET) < 32) echo '<div class="notice notice-error"><p><strong>Exam App Engine:</strong> A secure <strong>MCO_JWT_SECRET</strong> (at least 32 characters long) is not defined in your wp-config.php file for security. SSO will not work.</p></div>';
        if (empty(get_option('mco_exam_app_url'))) echo '<div class="notice notice-warning"><p><strong>Exam App Engine:</strong> The Exam Application URL is not set. Please <a href="' . admin_url('admin.php?page=mco-exam-engine') . '">go to the settings page</a> to configure it.</p></div>';
    }
}

// --- ADMIN MENU & PAGES ---
if (!function_exists('mco_exam_add_admin_menu')) {
    function mco_exam_add_admin_menu() {
        add_menu_page('Exam App Engine', 'Exam App Engine', 'manage_options', 'mco-exam-engine', 'mco_render_settings_tab', 'dashicons-analytics', 80);
        add_submenu_page('mco-exam-engine', 'Exam Programs', 'Exam Programs', 'manage_options', 'edit.php?post_type=mco_exam_program');
        add_submenu_page('mco-exam-engine', 'Recommended Books', 'Recommended Books', 'manage_options', 'edit.php?post_type=mco_recommended_book');
    }
}

if (!function_exists('mco_exam_register_settings')) {
    function mco_exam_register_settings() { 
        register_setting('mco_exam_app_settings_group', 'mco_exam_app_url'); 
    }
}

if (!function_exists('mco_render_settings_tab')) {
    function mco_render_settings_tab() {
        ?>
        <div class="wrap">
            <h1>Exam App Engine Settings</h1>
            <form method="post" action="options.php">
                <?php settings_fields('mco_exam_app_settings_group'); ?>
                <table class="form-table">
                    <tr valign="top">
                        <th scope="row"><label for="mco_exam_app_url">Exam Application URL</label></th>
                        <td>
                            <input type="url" id="mco_exam_app_url" name="mco_exam_app_url" value="<?php echo esc_attr(get_option('mco_exam_app_url')); ?>" class="regular-text" placeholder="https://exams.yourdomain.com" />
                            <p class="description">Enter the full URL of your standalone React examination app. Do not include a trailing slash.</p>
                        </td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
        </div>
        <?php
    }
}

// --- BATCH CSV IMPORTER ---
if (!function_exists('mco_enqueue_admin_scripts')) {
    function mco_enqueue_admin_scripts($hook) {
        if ($hook !== 'edit.php') return;
        global $post_type;
        if ($post_type === 'mco_exam_program' || $post_type === 'mco_recommended_book') {
            add_action('admin_head', function() use ($post_type) {
                $modal_id = ($post_type === 'mco_exam_program') ? 'mco-exam-import-modal' : 'mco-book-import-modal';
                ?>
                <script type="text/javascript">
                    jQuery(document).ready(function($) {
                        $('.page-title-action').after('<button id="mco-open-import-modal" class="page-title-action">Import</button>');
                        $('body').on('click', '#mco-open-import-modal', function(e) { e.preventDefault(); $('#<?php echo $modal_id; ?>').show(); });
                        $('body').on('click', '.mco-modal-close', function() {
                            $(this).closest('.mco-import-modal').hide();
                            $('.mco-import-initial-view').show();
                            $('.mco-import-progress-view').hide();
                            $('.mco-import-form').each(function(){ this.reset(); });
                            $('.mco-import-feedback').html('');
                            $('.mco-progress-bar').css('width', '0%');
                        });
                    });
                </script>
                <?php
            });
        }
    }
}

if (!function_exists('mco_add_import_modals_to_footer')) {
    function mco_add_import_modals_to_footer() {
        global $post_type;
        if ($post_type === 'mco_exam_program') mco_render_exam_import_modal();
        if ($post_type === 'mco_recommended_book') mco_render_book_import_modal();
    }
}

// --- EXAM IMPORTER ---
if (!function_exists('mco_render_exam_import_modal')) {
    function mco_render_exam_import_modal() {
        $template_url = add_query_arg(['mco_action' => 'download_exam_template'], admin_url('admin-post.php'));
        ?>
        <div id="mco-exam-import-modal" class="mco-import-modal" style="display:none; /* ... modal styles ... */">
             <!-- Modal content here, similar to before -->
        </div>
        <script>
            // JS for exam import, similar to before, but targeting exam-specific IDs and AJAX actions
        </script>
        <?php
    }
}
// AJAX handlers for exams: mco_handle_ajax_import_exams_start, mco_handle_ajax_import_exams_batch, etc.


// --- BOOK IMPORTER ---
if (!function_exists('mco_render_book_import_modal')) {
    function mco_render_book_import_modal() {
        $template_url = add_query_arg(['mco_action' => 'download_book_template'], admin_url('admin-post.php'));
        ?>
        <div id="mco-book-import-modal" class="mco-import-modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:10000;">
            <div style="position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; padding:2rem; border-radius:8px; width:90%; max-width:500px;">
                <button class="mco-modal-close" style="position:absolute; top:1rem; right:1rem; border:none; background:none; font-size:1.5rem; cursor:pointer;">&times;</button>
                <h2>Import Recommended Books (CSV)</h2>
                <div class="mco-import-initial-view">
                    <p>Upload a CSV file to create or update recommended books. The slug will be auto-generated from the title.</p>
                    <p><a href="<?php echo esc_url($template_url); ?>" class="button">Download CSV Template</a></p>
                    <hr style="margin: 1rem 0;">
                    <form class="mco-import-form" id="mco-book-import-form" method="post" enctype="multipart/form-data">
                        <?php wp_nonce_field('mco_import_books_nonce', 'mco_import_books_nonce'); ?>
                        <p><label for="mco_book_csv_file"><strong>Upload Your CSV File:</strong></label><br><input type="file" name="mco_book_csv_file" id="mco_book_csv_file" accept=".csv" required></p>
                        <p><input type="submit" class="button button-primary" value="Start Import"></p>
                    </form>
                </div>
                <div class="mco-import-progress-view" style="display:none;">
                    <p>Importing... Please do not close this window.</p>
                    <div style="background:#eee; border-radius:4px; padding:2px; margin-bottom:1rem;"><div class="mco-progress-bar" style="background:#0073aa; height:20px; width:0%; border-radius:2px; transition: width 0.3s ease;"></div></div>
                    <div class="mco-import-feedback" style="max-height: 200px; overflow-y: auto; background: #f9f9f9; border: 1px solid #ccc; padding: 10px; border-radius: 4px; margin-bottom: 1rem;"></div>
                    <button class="mco-cancel-import button">Cancel Import</button>
                </div>
            </div>
        </div>
        <script>
        jQuery(document).ready(function($){
            var bookImporter = { totalRows: 0, processedRows: 0, transientKey: '', isCancelled: false };
            $('#mco-book-import-form').on('submit', function(e){
                e.preventDefault();
                $(this).closest('.mco-import-modal').find('.mco-import-initial-view').hide();
                $(this).closest('.mco-import-modal').find('.mco-import-progress-view').show();
                $('.mco-import-feedback').html('');
                bookImporter.isCancelled = false;
                var formData = new FormData(this);
                formData.append('action', 'mco_import_books_csv_start');
                $.ajax({
                    url: ajaxurl, type: 'POST', data: formData, processData: false, contentType: false,
                    success: function(response) {
                        if (response.success) {
                            bookImporter.totalRows = response.data.total_rows;
                            bookImporter.transientKey = response.data.transient_key;
                            bookImporter.processedRows = 0;
                            $('.mco-import-feedback').text('Found ' + bookImporter.totalRows + ' books. Starting process...');
                            processBookBatch(1);
                        } else { $('.mco-import-feedback').html('<p style="color:red;"><strong>Error:</strong> ' + response.data + '</p>'); }
                    },
                    error: function() { $('.mco-import-feedback').html('<p style="color:red;"><strong>Error:</strong> Server error during setup.</p>'); }
                });
            });
            function processBookBatch(batchNumber) {
                if (bookImporter.isCancelled) return;
                $.ajax({
                    url: ajaxurl, type: 'POST',
                    data: { action: 'mco_import_books_csv_batch', nonce: '<?php echo wp_create_nonce("mco_import_books_batch_nonce"); ?>', transient_key: bookImporter.transientKey, batch: batchNumber },
                    success: function(response) {
                        if (bookImporter.isCancelled) return;
                        if (response.success) {
                            bookImporter.processedRows += response.data.processed;
                            let percent = bookImporter.totalRows > 0 ? Math.min(100, Math.round((bookImporter.processedRows / bookImporter.totalRows) * 100)) : 0;
                            $('.mco-progress-bar').css('width', percent + '%');
                            $('.mco-import-feedback').text('Processed ' + bookImporter.processedRows + ' of ' + bookImporter.totalRows + ' books...');
                            if (response.data.done) {
                                $('.mco-import-feedback').html('<p style="color:green;"><strong>Import complete!</strong> Page will reload.</p>');
                                setTimeout(function(){ location.reload(); }, 2000);
                            } else { processBookBatch(batchNumber + 1); }
                        } else { $('.mco-import-feedback').append('<p style="color:red;"><strong>Batch Error:</strong> ' + response.data + '</p>'); }
                    },
                    error: function() { if (bookImporter.isCancelled) return; $('.mco-import-feedback').append('<p style="color:red;"><strong>Error:</strong> Server error during batch processing.</p>'); }
                });
            }
            $('#mco-book-import-modal .mco-cancel-import').on('click', function(){
                if (!bookImporter.isCancelled) {
                    bookImporter.isCancelled = true;
                    $(this).prop('disabled', true).text('Cancelling...');
                    $.ajax({
                        url: ajaxurl, type: 'POST',
                        data: { action: 'mco_import_books_csv_cancel', nonce: '<?php echo wp_create_nonce("mco_import_books_cancel_nonce"); ?>', transient_key: bookImporter.transientKey },
                        success: function(response) { $('.mco-import-feedback').html('<p style="color:orange;"><strong>Import cancelled.</strong> Reloading...</p>'); setTimeout(function(){ location.reload(); }, 2000); }
                    });
                }
            });
        });
        </script>
        <?php
    }
}

if (!function_exists('mco_handle_book_csv_template_download')) {
    function mco_handle_book_csv_template_download() {
        if (!current_user_can('manage_options')) wp_die('Permission denied.');
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="recommended_books_template.csv"');
        $header = ['post_title', 'post_content', '_mco_affiliate_link_com', '_mco_affiliate_link_in', '_mco_affiliate_link_ae'];
        $output = fopen('php://output', 'w');
        fputcsv($output, $header);
        fclose($output);
        exit;
    }
}
add_action('admin_post_mco_action', function() {
    if (isset($_GET['mco_action']) && $_GET['mco_action'] === 'download_book_template') mco_handle_book_csv_template_download();
    if (isset($_GET['mco_action']) && $_GET['mco_action'] === 'download_exam_template') mco_handle_exam_csv_template_download();
});


if (!function_exists('mco_handle_ajax_import_books_start')) {
    function mco_handle_ajax_import_books_start() {
        if (!check_admin_referer('mco_import_books_nonce', 'mco_import_books_nonce') || !current_user_can('manage_options') || !isset($_FILES['mco_book_csv_file'])) wp_send_json_error('Security check failed or file not found.');
        $file = $_FILES['mco_book_csv_file'];
        if ($file['error'] !== UPLOAD_ERR_OK) wp_send_json_error('File upload error.');
        $handle = fopen($file['tmp_name'], 'r');
        $header = fgetcsv($handle);
        $expected_header = ['post_title', 'post_content', '_mco_affiliate_link_com', '_mco_affiliate_link_in', '_mco_affiliate_link_ae'];
        if (array_map('trim', $header) !== $expected_header) { fclose($handle); wp_send_json_error('Invalid CSV header. Please use the book template.'); }
        $total_rows = 0; while (fgetcsv($handle) !== false) { $total_rows++; } fclose($handle);
        $upload_dir = wp_upload_dir();
        $temp_filename = wp_unique_filename($upload_dir['path'], $file['name']);
        $temp_filepath = $upload_dir['path'] . '/' . $temp_filename;
        if (!move_uploaded_file($file['tmp_name'], $temp_filepath)) wp_send_json_error('Could not move uploaded file.');
        $transient_key = 'mco_import_books_' . md5($temp_filepath);
        set_transient($transient_key, ['filepath' => $temp_filepath, 'total_rows' => $total_rows], HOUR_IN_SECONDS);
        wp_send_json_success(['total_rows' => $total_rows, 'transient_key' => $transient_key]);
    }
}

if (!function_exists('mco_handle_ajax_import_books_batch')) {
    function mco_handle_ajax_import_books_batch() {
        check_ajax_referer('mco_import_books_batch_nonce', 'nonce');
        if (!current_user_can('manage_options')) wp_send_json_error('Permission denied.');
        $transient_key = sanitize_key($_POST['transient_key']);
        $import_data = get_transient($transient_key);
        if (false === $import_data) wp_send_json_error('Import session expired.');
        $batch_size = 20; $batch_number = intval($_POST['batch']); $offset = ($batch_number - 1) * $batch_size;
        $result = mco_import_books_batch_logic($import_data['filepath'], $offset, $batch_size);
        $done = ($offset + $result['processed']) >= $import_data['total_rows'] || $result['processed'] < $batch_size;
        if ($done) { unlink($import_data['filepath']); delete_transient($transient_key); }
        wp_send_json_success(['processed' => $result['processed'], 'done' => $done]);
    }
}

if (!function_exists('mco_import_books_batch_logic')) {
    function mco_import_books_batch_logic($csv_file_path, $offset, $limit) {
        $processed = 0;
        $header = ['post_title', 'post_content', '_mco_affiliate_link_com', '_mco_affiliate_link_in', '_mco_affiliate_link_ae'];
        $handle = fopen($csv_file_path, 'r');
        fgetcsv($handle); // Skip header
        for ($i = 0; $i < $offset; $i++) { if (fgetcsv($handle) === false) break; }
        while ($processed < $limit && ($data = fgetcsv($handle)) !== FALSE) {
            $row = array_combine($header, array_pad($data, count($header), null));
            $processed++;
            $post_slug = sanitize_title($row['post_title']);
            if (empty($post_slug)) continue;
            $existing_post = get_page_by_path($post_slug, OBJECT, 'mco_recommended_book');
            $post_data = ['post_title' => sanitize_text_field($row['post_title']), 'post_content' => wp_kses_post($row['post_content']), 'post_name' => $post_slug, 'post_type' => 'mco_recommended_book', 'post_status' => 'publish'];
            if ($existing_post) { $post_data['ID'] = $existing_post->ID; $post_id = wp_update_post($post_data, true); } else { $post_id = wp_insert_post($post_data, true); }
            if (!is_wp_error($post_id)) {
                update_post_meta($post_id, '_mco_affiliate_link_com', esc_url_raw($row['_mco_affiliate_link_com']));
                update_post_meta($post_id, '_mco_affiliate_link_in', esc_url_raw($row['_mco_affiliate_link_in']));
                update_post_meta($post_id, '_mco_affiliate_link_ae', esc_url_raw($row['_mco_affiliate_link_ae']));
            }
        }
        fclose($handle);
        return ['processed' => $processed];
    }
}

if (!function_exists('mco_handle_ajax_import_books_cancel')) {
    function mco_handle_ajax_import_books_cancel() {
        check_ajax_referer('mco_import_books_cancel_nonce', 'nonce');
        if (!current_user_can('manage_options')) wp_send_json_error('Permission denied.');
        $transient_key = sanitize_key($_POST['transient_key']);
        $import_data = get_transient($transient_key);
        if ($import_data && isset($import_data['filepath'])) { unlink($import_data['filepath']); delete_transient($transient_key); }
        wp_send_json_success('Import cancelled.');
    }
}


// --- META BOXES & SAVE FUNCTIONS ---
if (!function_exists('mco_add_meta_boxes')) {
    function mco_add_meta_boxes() {
        add_meta_box('mco_wc_product_meta', 'Exam App Configuration', 'mco_render_wc_product_meta_box', 'product', 'side', 'high');
        add_meta_box('mco_exam_program_meta', 'Exam Program Details', 'mco_render_exam_program_meta_box', 'mco_exam_program', 'normal', 'high');
        add_meta_box('mco_book_links_meta', 'Affiliate Links', 'mco_render_book_links_meta_box', 'mco_recommended_book', 'normal', 'high');
    }
}

// Helper to get the first term name for a given taxonomy
if (!function_exists('mco_get_first_term_name')) {
    function mco_get_first_term_name($post_id, $taxonomy) {
        $terms = wp_get_post_terms($post_id, $taxonomy, ['fields' => 'names']);
        return !is_wp_error($terms) && !empty($terms) ? $terms[0] : '';
    }
}

if (!function_exists('mco_render_exam_program_meta_box')) {
    function mco_render_exam_program_meta_box($post) {
        wp_nonce_field('mco_save_exam_meta', 'mco_exam_nonce');
        
        $source_url = get_post_meta($post->ID, '_mco_question_source_url', true);
        $cert_sku = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
        $bundle_sku = get_post_meta($post->ID, '_mco_bundle_sku', true);
        
        $practice_q = mco_get_first_term_name($post->ID, 'exam_practice_questions');
        $practice_d = mco_get_first_term_name($post->ID, 'exam_practice_duration');
        $cert_q = mco_get_first_term_name($post->ID, 'exam_cert_questions');
        $cert_d = mco_get_first_term_name($post->ID, 'exam_cert_duration');
        $pass_score = mco_get_first_term_name($post->ID, 'exam_pass_score');
        
        ?>
        <style>.mco-meta-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; } .mco-meta-field p { margin-top: 0; } .mco-meta-field label { font-weight: bold; display: block; margin-bottom: 5px; } .mco-meta-field input { width: 100%; }</style>
        <div class="mco-meta-grid">
            <div class="mco-meta-field"><label for="exam_practice_questions">Practice Questions</label><input type="number" id="exam_practice_questions" name="exam_practice_questions" value="<?php echo esc_attr($practice_q); ?>" /></div>
            <div class="mco-meta-field"><label for="exam_practice_duration">Practice Duration (Mins)</label><input type="number" id="exam_practice_duration" name="exam_practice_duration" value="<?php echo esc_attr($practice_d); ?>" /></div>
            <div class="mco-meta-field"><label for="exam_cert_questions">Certification Questions</label><input type="number" id="exam_cert_questions" name="exam_cert_questions" value="<?php echo esc_attr($cert_q); ?>" /></div>
            <div class="mco-meta-field"><label for="exam_cert_duration">Certification Duration (Mins)</label><input type="number" id="exam_cert_duration" name="exam_cert_duration" value="<?php echo esc_attr($cert_d); ?>" /></div>
            <div class="mco-meta-field"><label for="exam_pass_score">Pass Score (%)</label><input type="number" id="exam_pass_score" name="exam_pass_score" value="<?php echo esc_attr($pass_score); ?>" /></div>
        </div>
        <hr style="margin: 1.5rem 0;"><h3 style="margin-bottom: 1rem;">Technical Details</h3>
        <div class="mco-meta-grid">
             <div class="mco-meta-field"><label for="_mco_question_source_url">Question Source URL:</label><input type="url" id="_mco_question_source_url" name="_mco_question_source_url" value="<?php echo esc_attr($source_url); ?>" /></div>
            <div class="mco-meta-field"><label for="_mco_certification_exam_sku">Certification Exam SKU:</label><input type="text" id="_mco_certification_exam_sku" name="_mco_certification_exam_sku" value="<?php echo esc_attr($cert_sku); ?>" /></div>
             <div class="mco-meta-field"><label for="_mco_bundle_sku">Bundle SKU (Optional):</label><input type="text" id="_mco_bundle_sku" name="_mco_bundle_sku" value="<?php echo esc_attr($bundle_sku); ?>" /></div>
        </div>
        <?php
    }
}

if (!function_exists('mco_save_exam_program_meta')) {
    function mco_save_exam_program_meta($post_id) {
        if (!isset($_POST['mco_exam_nonce']) || !wp_verify_nonce($_POST['mco_exam_nonce'], 'mco_save_exam_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['_mco_question_source_url'])) update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($_POST['_mco_question_source_url']));
        if (isset($_POST['_mco_certification_exam_sku'])) update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($_POST['_mco_certification_exam_sku']));
        if (isset($_POST['_mco_bundle_sku'])) update_post_meta($post_id, '_mco_bundle_sku', sanitize_text_field($_POST['_mco_bundle_sku']));
        $taxonomies = ['exam_practice_questions', 'exam_practice_duration', 'exam_cert_questions', 'exam_cert_duration', 'exam_pass_score'];
        foreach ($taxonomies as $tax) {
            if (isset($_POST[$tax])) {
                $value = sanitize_text_field($_POST[$tax]);
                if (is_numeric($value) && $value !== '') { wp_set_object_terms($post_id, [(string)intval($value)], $tax); } else { wp_set_object_terms($post_id, [], $tax); }
            }
        }
    }
}

if (!function_exists('mco_render_book_links_meta_box')) {
    function mco_render_book_links_meta_box($post) {
        wp_nonce_field('mco_save_book_meta', 'mco_book_nonce');
        $link_com = get_post_meta($post->ID, '_mco_affiliate_link_com', true); $link_in = get_post_meta($post->ID, '_mco_affiliate_link_in', true); $link_ae = get_post_meta($post->ID, '_mco_affiliate_link_ae', true);
        echo '<p><label for="mco_affiliate_link_com">Amazon.com URL:</label><br><input type="url" id="mco_affiliate_link_com" name="mco_affiliate_link_com" value="' . esc_attr($link_com) . '" style="width:100%;"></p>';
        echo '<p><label for="mco_affiliate_link_in">Amazon.in URL:</label><br><input type="url" id="mco_affiliate_link_in" name="mco_affiliate_link_in" value="' . esc_attr($link_in) . '" style="width:100%;"></p>';
        echo '<p><label for="mco_affiliate_link_ae">Amazon.ae URL:</label><br><input type="url" id="mco_affiliate_link_ae" name="mco_affiliate_link_ae" value="' . esc_attr($link_ae) . '" style="width:100%;"></p>';
    }
}

if (!function_exists('mco_save_book_meta_data')) {
    function mco_save_book_meta_data($post_id) {
        if (!isset($_POST['mco_book_nonce']) || !wp_verify_nonce($_POST['mco_book_nonce'], 'mco_save_book_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['mco_affiliate_link_com'])) update_post_meta($post_id, '_mco_affiliate_link_com', esc_url_raw($_POST['mco_affiliate_link_com']));
        if (isset($_POST['mco_affiliate_link_in'])) update_post_meta($post_id, '_mco_affiliate_link_in', esc_url_raw($_POST['mco_affiliate_link_in']));
        if (isset($_POST['mco_affiliate_link_ae'])) update_post_meta($post_id, '_mco_affiliate_link_ae', esc_url_raw($_POST['mco_affiliate_link_ae']));
    }
}

if (!function_exists('mco_render_wc_product_meta_box')) {
    function mco_render_wc_product_meta_box($post) {
        wp_nonce_field('mco_save_wc_meta', 'mco_wc_nonce');
        $product_type = get_post_meta($post->ID, '_mco_product_type', true);
        echo '<label for="mco_product_type">Product Role:</label><select name="mco_product_type" id="mco_product_type" style="width:100%;"><option value="" ' . selected($product_type, '', false) . '>None</option><option value="certification_exam" ' . selected($product_type, 'certification_exam', false) . '>Certification Exam</option><option value="subscription_bundle" ' . selected($product_type, 'subscription_bundle', false) . '>Subscription / Bundle</option></select>';
    }
}

if (!function_exists('mco_save_wc_product_meta_data')) {
    function mco_save_wc_product_meta_data($post_id) {
        if (!isset($_POST['mco_wc_nonce']) || !wp_verify_nonce($_POST['mco_wc_nonce'], 'mco_save_wc_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['mco_product_type'])) update_post_meta($post_id, '_mco_product_type', sanitize_text_field($_POST['mco_product_type']));
    }
}
?>